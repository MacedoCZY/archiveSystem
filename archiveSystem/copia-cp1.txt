\documentclass[conference]{IEEEtran}
\IEEEoverridecommandlockouts
% The preceding line is only needed to identify funding in the first footnote. If that is unneeded, please comment it out.
\usepackage{cite}
\usepackage{amsmath,amssymb,amsfonts}
\usepackage{algorithmic}
\usepackage{graphicx}
\usepackage{textcomp}
\usepackage{xcolor}

\usepackage{geometry}
\usepackage{float}

\geometry{
  a4paper,
  left=2.5cm,
  right=2.5cm,
  top=2cm,
  bottom=2cm
}

\usepackage{listings}

\definecolor{verde}{rgb}{0.25,0.5,0.35}
\definecolor{jpurple}{rgb}{0.5,0,0.35}
\definecolor{darkgreen}{rgb}{0.0, 0.2, 0.13}

\def\BibTeX{{\rm B\kern-.05em{\sc i\kern-.025em b}\kern-.08em
    T\kern-.1667em\lower.7ex\hbox{E}\kern-.125emX}}

\newcommand{\estiloJava}{
\lstset{
    language=Java,
    basicstyle=\ttfamily\small,
    keywordstyle=\color{jpurple}\bfseries,
    stringstyle=\color{red},
    commentstyle=\color{verde},
    morecomment=[s][\color{blue}]{/**}{*/},
    extendedchars=true,
    showspaces=false,
    showstringspaces=false,
    numbers=left,
    numberstyle=\tiny,
    breaklines=true,
    backgroundcolor=\color{cyan!10},
    breakautoindent=true,
    captionpos=b,
    xleftmargin=0pt,
    tabsize=2
}}

\begin{document}

\title{Gerenciamento de Memória}

\author{\IEEEauthorblockN{1\textsuperscript{st} Gustavo Macedo}
\IEEEauthorblockA{{\textit{Unioeste} }\\
Cascavel, Brasil \\
gustavomacdo1366@hotmail.com}
\and
\IEEEauthorblockN{2\textsuperscript{nd} Bruno Maion}
\IEEEauthorblockA{\textit{Unioeste}\\
Cascavel, Brasil \\
brunosmaion@hotmail.com}}


\maketitle

\begin{IEEEkeywords}
sistema-de-arquivos, sistema-operacional
\end{IEEEkeywords}

\section{Introdução}
\subsection{Especificação}
Tipo de alocação: alocação e gerenciamento de espaços livres com tabela de alocação de arquivos.
\\
A partir dos princípios denotados, alocação e gerenciamento de espaços livres com tabela de alocação de arquivos, elaboramos o modelo do sistema de arquivos em conformidade ao sistema existente FAT, buscando simplificar e remover características desnecessárias para este projeto.

\begin{table}[htbp]
    \centering
    \begin{tabular}{|c|c|c|c|}
        \hline
        Boot Record & FAT & Diretório & Área de Dados  & 1 setor & 64 setores & Raiz 1 setor & 65.534 setores\\
        \hline
    \end{tabular}
    \caption{Diagrama do Sistema de Arquivos}
    \label{tab:fat-diagram}
\end{table}
Boot Record\\
\begin{tabular}{|l|l|}
\hline
    \textbf{Campo} & \textbf{Valor} \\
    \hline
    Tamanho do Setor & 2.048 bytes \\
    \hline
    Reservado & 1 setor \\
    \hline
    Número de FATs & 1 \\
    \hline
    Entradas no Diretório Raiz & 32 \\
    \hline
    Setores Totais & 65.600 \\
    \hline
    Setores por FAT & 64 setores\\
    \hline
\end{tabular}
\\
\begin{itemize}
     \item Tenho 64 setores na FAT, cada setores tem 2.048 bytes, e meus ponteiros tem 16 bits cada, ou 2 bytes.\\
     \item Portanto, a FAT é constituída em 131.072 bytes.\\
     \item Visto que cada ponteiro ocupa 2 bytes, logo, teremos então 131.072÷2 = 65.536 ponteiros.\\
     \item Deste modo, sabendo que tenho 65.536 ponteiros e que, cada ponteiro aponta para um setor na área de dados, porém como o ponteiro final é definido como FFFE, teremos então, 65.534*2048 = 134.213.632 bytes ou 127,99609375 mega bytes.\\
\end{itemize}
Os dados dos arquivos são armazenados nos setores do disco. Um arquivo pode ocupar vários setores consecutivos, formando uma cadeia de setores.

\newpage


\begin{table}[H]
  \centering
  \begin{tabular}{|l|l|l|l|}
    \hline
    \textbf{Campo} & \textbf{Offset (decimal)} & \textbf{Offset (hex)} & \textbf{Size (in bytes)} \\
    \hline
    Tamanho do Setor & 0 & 0x00 & 2 \\
    \hline
    Reservado & 2 & 0x03 & 2 \\
    \hline
    Número de FATs & 4 & 0x04 & 1 \\
    \hline
    Entradas no Diretório Raiz & 5 & 0x05 & 2 \\
    \hline
    Setores Totais & 7 & 0x07 & 4 \\
    \hline
    Setores por FAT & 11 & 0x0B & 2 \\
    \hline
  \end{tabular}
\end{table}

8.3 - Formato de arquivo \\
\\
\begin{tabular}{|p{2cm}|p{2cm}|p{2cm}|p{2.3cm}|}
\hline
Offset (decimal) & Offset (hex) & Tamanho em bytes & Descrição \\
\hline
0 & 0x00 & 21 & Nome do arquivo/diretório. \\
\hline
21 & 0x15 & 4 & Extensão do arquivo \\
\hline
25 & 0x19 & 1 & Atributos do arquivo: \\
 &  &  & 0x10=Diretório; 0x20=Arquivo; \\
 &  &  & 0xFF=Entrada excluída. \\
\hline
26 & 0x1A & 2 & Primeiro setor do arquivo na seção de dados. \\
\hline
28 & 0x1C & 4 & Tamanho do arquivo em bytes. \\
\hline
\end{tabular}
\\\\\\
Dentro da tabela FAT, teremos os ponteiros para os setores já citados anteriormente, sendo cada um deles com a capacidade de 16 bits, sendo 0000 setor livre e maior que FFFE será o setor final.
Operações possíveis:\\
A. Formatador. O usuário deverá informar o tamanho em setores da partição a ser formatada: \\
Será formatado no padrão descrito com boot sector definido, com os tamanhos introduzidos pelo usuário para o tamanho do setor e partições.\\
B. Cópia de um arquivo do disco rígido para o sistema de arquivos:\\
Teremos um comando para copiar o arquivo seguindo do nome do arquivo, onde será rastreado os setores livres para gravar o arquivo, sendo feito o teste anteriormente para saber se existe espaço livre.\\
C. Cópia de um arquivo do sistema de arquivos para o disco rígido:\\
A partir de um comando, vai ler a tabela FAT, para encontrar os setores com arquivos, ao encontrar o desejado será possível copiá-lo para o sistema pegando suas informações disposta na tabela.\\
D. Listagem dos arquivos armazenados no sistema de arquivos:\\
A partir de um comando, onde será especificado qual unidade será acessada, será listado todos os arquivos presentes nos setores ocupados.\\
E. Remoção de arquivos:\\
A partir de um comando poderá remover o arquivo limpando os bytes que ele ocupa, deverá ser visto o nome do arquivo a partir da listagem para poder saber o nome do arquivo a ser deletado. \\\\
\textbf{Guia do programador}\\\\
typedef struct BootRecord \{ 

unsigned short sector\_size;

unsigned short reserved\_sectors;

unsigned char fat\_count; 

unsigned short root\_entryCount; 

unsigned int total\_sectors;

unsigned short sectors\_per\_fat; \\
\} \_\_attribute\_\_((packed)) BootRecord;\\
\\
typedef struct arqFormato \{ 

    unsigned char nomeEntrada[21];
    
    unsigned char extensaoEntrada[3]; 
    
    unsigned char atributoFile; 
    
    unsigned short primeiroSetor; 
    
    unsigned int fileSize; \\
\} \_\_attribute\_\_((packed)) arqFormato;\\
\\
comecoTabelaFat = 2.048\\
comecoRootDir = (1 + 64) * 2.048 = 133.120\\
comecoAreaDados = (2 + 64) * 2.048= 135.168\\

O sistema não trabalhará com cluster's, serão penas setores com ponteiros relativos entre eles. Um setor é uma unidade básica de armazenamento em disco. 
O esquema de setores deste sistema de arquivos é baseado em um arranjo sequencial de setores. Cada setor é uma unidade básica de armazenamento e possui um 
tamanho fixo de 2.048 bytes. Os dados dos arquivos são armazenados nos setores do disco, e um arquivo pode ocupar vários setores consecutivos, formando uma 
cadeia de setores.
O sistema de arquivos utiliza uma tabela de alocação de arquivos (FAT) para gerenciar os setores ocupados pelos arquivos. A tabela FAT contém ponteiros de 16
 bits que apontam para os setores ocupados pelos arquivos. Os valores especiais são utilizados para indicar setores livres (0000) e o final da cadeia de setores
 de um arquivo (maior que FFFE).
Portanto, o esquema de setores deste sistema de arquivos é linear, com os setores sendo alocados e gerenciados de forma sequencial.

Inicio a tabela em 2048, deixo tudo 0000 até 64, cada um desses será um ponteiro direto para o inicio da data, Eu preciso de um modo de atulizar o tamanho no 
ponteiro para saber se ainda tem espaço no setor.

Para armazenamento em sub diretórios, lembrar que, ao analisar o root dir, terei os setores que eles ocupam, contíguos ou não, indo nestes setores na data com
 o cálculo do -2, se forem sub diretórios já saberei posteriormente pela análise dos 32 bytes de entrada no root dir, então la na data-2 do sub dir terei onde 


obs: a imagem que tenho analisada é a fat16 1
\end{document}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    